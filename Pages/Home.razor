@page "/"
@using System.Text.Json

<h3>Blackjack</h3>

<h4 class="balance">Balance: $@($"{PlayerBalance:F2}")</h4>


@if (ChooseBet)
{
    <div class="choose-bet-container">
        <p>Choose your bet amount:</p>

        <div class="bet-buttons">
            <button @onclick="() => SetBet(10)">$10</button>
            <button @onclick="() => SetBet(20)">$20</button>
            <button @onclick="() => SetBet(50)">$50</button>
            <button @onclick="() => SetBet(100)">$100</button>
        </div>

        <div class="custom-bet">
            <label for="customBet">Custom Bet:</label>
            <input type="number" id="customBet" name="customBet" @bind="CustomBetAmount" min="10" step="10" />
            <button @onclick="SetCustomBet">Place Custom Bet</button>
        </div>
    </div>
}
else
{
    <h4 class="bet-amount">Bet Amount: $@($"{BetAmount:F2}")</h4>

    @if (IsSplit)
    {
        <div>
            <h4>First Hand:</h4>
            <div class="player-hand">
                @foreach (var card in PlayerHand1)
                {
                    <img src="images/cards/@CardImageFileName(card)" alt="@card" class="card-image" />
                }
            </div>
            <h4>First Hand Score: @PlayerScore1</h4>
        </div>

        <div>
            <h4>Second Hand:</h4>
            <div class="player-hand">
                @foreach (var card in PlayerHand2)
                {
                    <img src="images/cards/@CardImageFileName(card)" alt="@card" class="card-image" />
                }
            </div>
            <h4>Second Hand Score: @PlayerScore2</h4>
        </div>
    }
    else
    {
        <div>
            <h4>Your Hand:</h4>
            <div class="player-hand">
                @foreach (var card in PlayerHand)
                {
                    <img src="images/cards/@CardImageFileName(card)" alt="@card" class="card-image" />
                }
            </div>
            <h4>Your Score: @PlayerScore</h4>
        </div>
    }

    <div>
        <h4>Dealer's Hand:</h4>
        <div class="dealer-hand">
            @foreach (var card in DealerHand)
            {
                <img src="images/cards/@CardImageFileName(card)" alt="@card" class="card-image" />
            }
        </div>
        <h4>Dealer Score: @DealerScore</h4>
    </div>

    @if (GameOver)
    {
        <div class="result-message">
            @if (!IsSplit)
            {
                <h4 class="result-message">@ResultMessage</h4>
            }
            @if (PlayerBalance < 1)
            {
                <p>You are out of money! Restart to start over.</p>
            }
        </div>
    }
    @if (IsSplit)
    {
        <div class="result-message">
            <h4 class="result-message">@ResultMessage</h4>
        </div>
    }

    <div class="action-buttons">
        @if (!IsSplit && !GameOver)
        {
            if (PlayerBalance >= BetAmount)
            {
                <button @onclick="Hit">Hit</button>
                <button @onclick="Stand">Stand</button>
                <button @onclick="DoubleUp">Double</button>
                @if (CanSplit())
                {
                    <button @onclick="Split">Split</button>
                }
            }
            else
            {
                <button @onclick="Hit">Hit</button>
                <button @onclick="Stand">Stand</button>
                @if (CanSplit())
                {
                    <button @onclick="Split">Split</button>
                }
            }
        }
        else if (IsSplit && !GameOver)
        {
            <button @onclick="Hit">Hit</button>
            <button @onclick="Stand">Stand</button>
        }
        else if (PlayerBalance < 1)
        {
            <button @onclick="RestartGame">Restart</button>
        }
        else
        {
            <button @onclick="NextHand">Next Hand</button>
        }
    </div>
}

@code {
    private List<string> PlayerHand = new();
    private List<string> DealerHand = new();
    private int PlayerScore = 0;
    private int DealerScore = 0;
    private string ResultMessage = "";
    private List<string> Deck = new();
    private decimal PlayerBalance = 100;
    private decimal CustomBetAmount { get; set; } = 10;
    private decimal BetAmount = 10;

    // Split Variables
    private List<string> PlayerHand1 = new();
    private List<string> PlayerHand2 = new();
    private int PlayerScore1 = 0;
    private int PlayerScore2 = 0;
    private bool PlayingFirstHand = true;

    private bool ChooseBet = true;
    private bool GameOver = false;
    private bool IsSplit = false;

    private void InitializeGame(decimal amount)
    {
        // Reset game state
        ChooseBet = false;
        GameOver = false;
        IsSplit = false;
        ResultMessage = string.Empty;

        // Set bet amount
        BetAmount = amount;

        // Prepare deck and deal initial cards
        Deck = GenerateDeck();
        ShuffleDeck();

        PlayerHand.Clear();
        DealerHand.Clear();

        PlayerHand.Add(DrawCard());
        PlayerHand.Add(DrawCard());
        DealerHand.Add(DrawCard());

        // Calculate initial scores but do not trigger game over conditions
        PlayerScore = CalculateHandScore(PlayerHand);
        DealerScore = CalculateHandScore(DealerHand);

        CalculateScores(amount, isInitialization: true);
    }

    private void SetBet(decimal amount)
    {
        PlayerBalance -= amount;
        InitializeGame(amount);
    }

    private void SetCustomBet()
    {
        if (CustomBetAmount >= 10 && CustomBetAmount <= PlayerBalance)
        {
            PlayerBalance -= CustomBetAmount;
            InitializeGame(CustomBetAmount);
        }
        else
        {
            Console.WriteLine("Invalid custom bet amount.");
        }
    }

    private bool CanSplit()
    {
        if (PlayerHand.Count != 2) return false;

        int value1 = GetCardValue(PlayerHand[0]);
        int value2 = GetCardValue(PlayerHand[1]);

        return value1 == value2 || (value1 >= 10 && value2 >= 10);
    }

    private List<string> GenerateDeck()
    {
        string[] suits = { "hearts", "diamonds", "clubs", "spades" };
        string[] ranks = { "2", "3", "4", "5", "6", "7", "8", "9", "10", "jack", "queen", "king", "ace" };

        return suits
            .SelectMany(suit => ranks.Select(rank => $"{rank}_of_{suit}"))
            .ToList();
    }

    private void ShuffleDeck()
    {
        var rng = new Random();
        Deck = Deck.OrderBy(_ => rng.Next()).ToList();
    }

    private string DrawCard()
    {
        if (Deck.Count == 0) throw new InvalidOperationException("The deck is empty!");
        string card = Deck[0];
        Deck.RemoveAt(0);
        return card;
    }

    private int GetCardValue(string card)
    {
        string rank = card.Split('_')[0];

        return rank switch
        {
            "ace" => 11,
            "king" or "queen" or "jack" => 10,
            _ => int.Parse(rank)
        };
    }

    private void CalculateScores(decimal amount, bool isInitialization = false)
    {
        PlayerScore = CalculateHandScore(PlayerHand);
        DealerScore = CalculateHandScore(DealerHand);

        if (isInitialization) return;

        // Check for Blackjack
        if (PlayerHand.Count == 2 && PlayerScore == 21)
        {
            ResultMessage = $"Blackjack! Winnings: ${amount * 2.5m:F2}!";
            PlayerBalance += amount * 2.5m;
            GameOver = true;
            return;
        }

        // Check for bust
        if (PlayerScore > 21)
        {
            ResultMessage = "You busted! Dealer wins.";
            GameOver = true;
        }
    }



    private int CalculateHandScore(List<string> hand)
    {
        int score = hand.Sum(card => GetCardValue(card));
        int aceCount = hand.Count(card => card.Contains("ace"));

        while (score > 21 && aceCount > 0)
        {
            score -= 10;
            aceCount--;
        }

        return score;
    }

    private void Hit()
    {
        if (GameOver) return;

        if (IsSplit)
        {
            if (PlayingFirstHand)
            {
                PlayerHand1.Add(DrawCard());
                PlayerScore1 = CalculateHandScore(PlayerHand1);

                if (PlayerScore1 > 21)
                {
                    ResultMessage = "First hand busted! Moving to second hand.";
                    PlayingFirstHand = false;
                }
            }
            else
            {
                PlayerHand2.Add(DrawCard());
                PlayerScore2 = CalculateHandScore(PlayerHand2);

                if (PlayerScore2 > 21)
                {
                    ResultMessage = "Second hand busted!";
                    EndSplitRound();
                }
            }
        }
        else
        {
            PlayerHand.Add(DrawCard());
            PlayerScore = CalculateHandScore(PlayerHand);

            if (PlayerScore > 21)
            {
                ResultMessage = "You busted! Dealer wins.";
                GameOver = true;
            }
        }
    }

    private void Stand()
    {
        if (GameOver) return;

        if (IsSplit)
        {
            if (PlayingFirstHand)
            {
                ResultMessage = "Standing on first hand. Moving to second hand.";
                PlayingFirstHand = false;
            }
            else
            {
                ResultMessage = "Standing on second hand.";

                while (DealerScore < 17)
                {
                    DealerHand.Add(DrawCard());
                    DealerScore = CalculateHandScore(DealerHand);
                }

                if (DealerScore > 21 || PlayerScore > DealerScore)
                {
                    ResultMessage = $"You win! Winnings: ${BetAmount * 2:F2}!";
                    PlayerBalance += BetAmount * 2; // Win doubles the bet
                }
                else if (PlayerScore < DealerScore)
                {
                    ResultMessage = "Dealer wins.";
                }
                else
                {
                    ResultMessage = "It's a tie!";
                    PlayerBalance += BetAmount; // Tie returns the bet
                }

                GameOver = true;

                EndSplitRound();
            }
        }
        else
        {
            // Regular Stand logic
            while (DealerScore < 17)
            {
                DealerHand.Add(DrawCard());
                DealerScore = CalculateHandScore(DealerHand);
            }

            if (DealerScore > 21 || PlayerScore > DealerScore)
            {
                ResultMessage = $"You win! Winnings: ${BetAmount * 2:F2}!";
                PlayerBalance += BetAmount * 2; // Win doubles the bet
            }
            else if (PlayerScore < DealerScore)
            {
                ResultMessage = "Dealer wins.";
            }
            else
            {
                ResultMessage = "It's a tie!";
                PlayerBalance += BetAmount; // Tie returns the bet
            }

            GameOver = true;
        }
    }

    private void Split()
    {
        // Ensure player has enough balance for an additional bet
        if (PlayerBalance < BetAmount)
        {
            ResultMessage = "Not enough balance to split!";
            return;
        }

        // Deduct an additional bet
        PlayerBalance -= BetAmount;

        // Split the cards into two hands
        PlayerHand1 = new List<string> { PlayerHand[0], DrawCard() };
        PlayerHand2 = new List<string> { PlayerHand[1], DrawCard() };

        // Reset the main player hand and scores
        PlayerHand.Clear();
        PlayerScore1 = CalculateHandScore(PlayerHand1);
        PlayerScore2 = CalculateHandScore(PlayerHand2);

        // Start playing the first hand
        PlayingFirstHand = true;
        IsSplit = true;
        GameOver = false;
        ResultMessage = "Playing first split hand.";
    }

    private void EndSplitRound()
    {
        // Determine results for both hands
        decimal winnings = 0;

        if (PlayerScore1 <= 21 && (PlayerScore1 > DealerScore || DealerScore > 21))
        {
            winnings += BetAmount * 2;
        }

        if (PlayerScore2 <= 21 && (PlayerScore2 > DealerScore || DealerScore > 21))
        {
            winnings += BetAmount * 2;
        }

        PlayerBalance += winnings;

        PlayingFirstHand = false;
        GameOver = true;
        ResultMessage = $"Split round ended. Winnings: ${winnings:F2}";
    }

    private void DoubleUp()
    {
        if (GameOver) return;

        PlayerBalance = PlayerBalance - BetAmount;

        BetAmount = BetAmount * 2;

        PlayerHand.Add(DrawCard());
        CalculateScores(BetAmount);
        Stand();
    }

    private void RestartGame()
    {
        PlayerBalance = 100;
        ChooseBet = true;
    }

    private void NextHand()
    {
        IsSplit = false;
        ChooseBet = true;
    }

    private string CardImageFileName(string card)
    {
        return $"{card}.png";
    }
}
